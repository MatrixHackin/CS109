Index: src/view/GameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport model.Player;\r\nimport model.User;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.text.SimpleDateFormat;\r\n\r\npublic class GameFrame extends MyFrame {\r\n    public BeginFrame beginFrame;\r\n    private final int ONE_CHESS_SIZE;\r\n\r\n    private BoardView boardView;\r\n    JButton homeButton;\r\n    User user;\r\n    JButton changeThemeButton;\r\n    JButton regretButton;\r\n    JButton musicButton;\r\n    JButton resetButton;\r\n    JButton saveButton;\r\n    AIFrame aiFrame=new AIFrame();\r\n    JFrame loadFrame;\r\n    TurnLabel turnLabel=new TurnLabel();\r\n    public JLabel timeLabel=new JLabel();\r\n    JLabel dayBG;\r\n    JLabel nightBG;\r\n    JPanel redDeadPanel;\r\n    JPanel blueDeadPanel;\r\n    public boolean isDay;\r\n    public boolean musicOn;\r\n    public GameFrame() {\r\n        super(1000,700);\r\n\r\n        this.ONE_CHESS_SIZE = 80;\r\n        isDay = true;\r\n        musicOn=true;\r\n\r\n\r\n        addChessboard();\r\n        addTimeLabel();\r\n        addTurnLable();\r\n        addHomeButton();\r\n        addRegretButton();\r\n        addMusicButton();\r\n        addResetButton();\r\n        addChangeThemeButton();\r\n        addSaveButton();\r\n        addRedDeadPanel();\r\n        addBlueDeadPanel();\r\n\r\n\r\n\r\n\r\n\r\n        boardView.redDeadPanel=this.redDeadPanel;\r\n        boardView.blueDeadPanel=this.blueDeadPanel;\r\n\r\n        Image image = new ImageIcon(\"resource/map.png\").getImage();\r\n        image = image.getScaledInstance(1000, 700, Image.SCALE_DEFAULT);\r\n        ImageIcon icon = new ImageIcon(image);\r\n        this.dayBG = new JLabel(icon);\r\n        this.dayBG.setSize(1000,700);\r\n        this.dayBG.setLocation(0,0);\r\n\r\n        Image image1 = new ImageIcon(\"resource/night.png\").getImage();\r\n        image1 = image1.getScaledInstance(1000, 700, Image.SCALE_DEFAULT);\r\n        ImageIcon icon1 = new ImageIcon(image1);\r\n        this.nightBG = new JLabel(icon1);\r\n        this.nightBG.setSize(1000,700);\r\n        this.nightBG.setLocation(0,0);\r\n\r\n        add(dayBG);\r\n    }\r\n    public GameFrame(User user) {\r\n        super(1000,700);\r\n\r\n        this.ONE_CHESS_SIZE = 80;\r\n        isDay = true;\r\n        musicOn=true;\r\n\r\n\r\n        addChessboard();\r\n        addTimeLabel();\r\n        addTurnLable();\r\n        addHomeButton();\r\n        addRegretButton();\r\n        addMusicButton();\r\n        addResetButton();\r\n        addChangeThemeButton();\r\n        addSaveButton();\r\n        addRedDeadPanel();\r\n        addBlueDeadPanel();\r\n\r\n\r\n\r\n\r\n\r\n        boardView.redDeadPanel=this.redDeadPanel;\r\n        boardView.blueDeadPanel=this.blueDeadPanel;\r\n\r\n        Image image = new ImageIcon(\"resource/map.png\").getImage();\r\n        image = image.getScaledInstance(1000, 700, Image.SCALE_DEFAULT);\r\n        ImageIcon icon = new ImageIcon(image);\r\n        this.dayBG = new JLabel(icon);\r\n        this.dayBG.setSize(1000,700);\r\n        this.dayBG.setLocation(0,0);\r\n\r\n        Image image1 = new ImageIcon(\"resource/night.png\").getImage();\r\n        image1 = image1.getScaledInstance(1000, 700, Image.SCALE_DEFAULT);\r\n        ImageIcon icon1 = new ImageIcon(image1);\r\n        this.nightBG = new JLabel(icon1);\r\n        this.nightBG.setSize(1000,700);\r\n        this.nightBG.setLocation(0,0);\r\n\r\n        add(dayBG);\r\n    }\r\n\r\n    private void addTimeLabel(){\r\n        boardView.timer.start();\r\n        timeLabel.setSize(100,50);\r\n        timeLabel.setLocation(920,25);\r\n        timeLabel.setFont(new Font(\"Arial\",Font.BOLD,50));\r\n        add(timeLabel);\r\n    }\r\n    private void addBlueDeadPanel(){\r\n        this.blueDeadPanel=new JPanel();\r\n        blueDeadPanel.setLayout(new GridLayout(2,4));\r\n        blueDeadPanel.setLocation(688,30);\r\n        blueDeadPanel.setSize(200,80);\r\n        blueDeadPanel.setOpaque(false);\r\n        add(blueDeadPanel);\r\n    }\r\n    private void addRedDeadPanel(){\r\n        this.redDeadPanel=new JPanel();\r\n        redDeadPanel.setLayout(new GridLayout(2,4));\r\n        redDeadPanel.setLocation(113,30);\r\n        redDeadPanel.setSize(200,80);\r\n        redDeadPanel.setOpaque(false);\r\n        add(redDeadPanel);\r\n    }\r\n    private void addSaveButton(){\r\n        this.saveButton=new GameButton(\"resource/icon/save-44.png\");\r\n        saveButton.setLocation(930,280);\r\n        saveButton.addActionListener((e)->{\r\n            this.loadFrame.setVisible(true);\r\n        });\r\n        add(saveButton);\r\n    }\r\n    private void addChangeThemeButton(){\r\n        this.changeThemeButton=new GameButton(\"resource/icon/changeTheme.png\");\r\n        changeThemeButton.setLocation(930,350);\r\n        changeThemeButton.addActionListener((e)->{\r\n            if(isDay){\r\n                this.remove(dayBG);\r\n                this.isDay=false;\r\n                add(nightBG);\r\n            }\r\n            else {\r\n                this.remove(nightBG);\r\n                this.isDay=true;\r\n                add(dayBG);\r\n            }\r\n            repaint();\r\n            revalidate();\r\n        });\r\n        add(changeThemeButton);\r\n    }\r\n    private void addResetButton(){\r\n        this.resetButton=new GameButton(\"resource/icon/reset.png\");\r\n        resetButton.setLocation(930,420);\r\n        resetButton.addActionListener((e)->{\r\n            boardView.controller.reset();\r\n        });\r\n        add(resetButton);\r\n    }\r\n    private void addMusicButton(){\r\n        this.musicButton=new GameButton(\"resource/icon/sound-full-icon.png\");\r\n        musicButton.setLocation(930,490);\r\n        musicButton.addActionListener((e)->{\r\n            Image image = new ImageIcon(\"resource/icon/sound-off-icon.png\").getImage();\r\n            image = image.getScaledInstance( 40,40, Image.SCALE_DEFAULT);\r\n            ImageIcon icon = new ImageIcon(image);\r\n            Image image1 = new ImageIcon(\"resource/icon/sound-full-icon.png\").getImage();\r\n            image1 = image1.getScaledInstance( 40,40, Image.SCALE_DEFAULT);\r\n            ImageIcon icon1 = new ImageIcon(image1);\r\n            if(musicOn){\r\n                musicButton.setIcon(icon);\r\n                musicOn=false;\r\n            }\r\n            else {\r\n                musicButton.setIcon(icon1);\r\n                musicOn=true;\r\n            }\r\n\r\n\r\n        });\r\n        add(musicButton);\r\n    }\r\n    private void addRegretButton(){\r\n        this.regretButton=new GameButton(\"resource/icon/round-line-left-arrow-icon.png\");\r\n        regretButton.setLocation(930,560);\r\n        regretButton.addActionListener((e)->{\r\n            boardView.controller.regretOneStep();\r\n        });\r\n        add(regretButton);\r\n    }\r\n    private void addHomeButton(){\r\n        this.homeButton=new GameButton(\"resource/icon/home-button-icon.png\");\r\n        homeButton.setLocation(930,630);\r\n        homeButton.addActionListener((e)->{\r\n            this.setVisible(false);\r\n            beginFrame.setVisible(true);\r\n        });\r\n        add(homeButton);\r\n    }\r\n    private void addTurnLable(){\r\n        turnLabel.setBounds(930,120,100,100);\r\n        turnLabel.setForeground(new Color(255,215,0));\r\n        add(turnLabel);\r\n    }\r\n\r\n    public BoardView getBoardView() {\r\n        return boardView;\r\n    }\r\n\r\n    public void setBoardView(BoardView boardView) {\r\n        this.boardView = boardView;\r\n    }\r\n\r\n    private void addChessboard() {\r\n        boardView = new BoardView(ONE_CHESS_SIZE, turnLabel,timeLabel);\r\n        boardView.setLocation(140, 120);\r\n        add(boardView);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/GameFrame.java b/src/view/GameFrame.java
--- a/src/view/GameFrame.java	(revision e6b38a12294199405ebd993ceb40e207911f3be7)
+++ b/src/view/GameFrame.java	(date 1684664035007)
@@ -194,8 +194,6 @@
                 musicButton.setIcon(icon1);
                 musicOn=true;
             }
-
-
         });
         add(musicButton);
     }
Index: src/controller/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.*;\r\nimport listener.GameListener;\r\nimport view.BoardView;\r\nimport view.CellView;\r\nimport view.GameFrame;\r\nimport view.chessView.AnimalView;\r\nimport view.chessView.DeadChessView;\r\n\r\nimport javax.swing.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class Controller implements GameListener {\r\n\r\n    public Board board;\r\n    public BoardView boardView;\r\n    public ArrayList<BoardPoint> canStepPoints;//把可以走的点返回来给我高亮\r\n    public Player currentPlayer;\r\n    public Player winner;\r\n    public BoardPoint selectedPoint;//选中的点高亮\r\n    public boolean isPlayback;\r\n    public boolean skip;\r\n    public boolean AI = false;\r\n    public AI AIplayer = new AI();\r\n    public AnimalView eaten;\r\n    public ArrayList<Board> steps;\r\n\r\n    public static Timer timer;\r\n\r\n    public Controller(BoardView boardView, Board board) {\r\n        this.boardView = boardView;\r\n        this.board = board;\r\n        this.currentPlayer = Player.BLUE;\r\n        this.winner = null;\r\n        isPlayback = false;\r\n        skip = false;\r\n        this.steps = new ArrayList<>();\r\n\r\n        boardView.setController(this);\r\n        boardView.initiateChessComponent(board);\r\n        boardView.repaint();\r\n    }\r\n\r\n    public void changePlayer() {\r\n        currentPlayer = currentPlayer == Player.BLUE ? Player.RED : Player.BLUE;\r\n        if (currentPlayer == Player.BLUE)\r\n            boardView.turnLabel.setBounds(930, 120, 100, 100);\r\n        else\r\n            boardView.turnLabel.setBounds(35, 120, 100, 100);\r\n    }\r\n\r\n    public void checkWin(BoardPoint point) {\r\n        if (board.blueDead.size() == 8) {\r\n            winner = Player.RED;\r\n        } else if (board.redDead.size() == 8) {\r\n            winner = Player.BLUE;\r\n        } else if (board.isOpponentDens(point, currentPlayer)) {\r\n            winner = currentPlayer;\r\n        }\r\n        //判断棋子全吃完了，或者到老巢了//\r\n    }\r\n\r\n    public void winView() {\r\n        JOptionPane.showMessageDialog(boardView, (winner == Player.BLUE ? \"BLUE\" : \"RED\") + \" Win !\");\r\n    }\r\n\r\n    @Override\r\n    public void clickCell(BoardPoint point, CellView component) {\r\n        if (selectedPoint != null) {\r\n            if (board.canMove(selectedPoint, point)) {\r\n                board.move(selectedPoint, point);\r\n                setAllCellsCanStepFalse();\r\n                canStepPoints = null;\r\n                boardView.setChessViewAtCell(point, boardView.removeChessViewAtGrid(selectedPoint));\r\n                selectedPoint = null;\r\n                steps.add(board);\r\n                checkWin(point);\r\n                if (winner != null) {\r\n                    winView();\r\n                    reset();\r\n                } else {\r\n                    boardView.timer.stop();\r\n                    boardView.count=20;\r\n                    boardView.timeLabel.setText(Integer.toString(boardView.count));\r\n                    boardView.timer.start();\r\n                    if(boardView.controller.currentPlayer==Player.BLUE){\r\n                        boardView.timeLabel.setLocation(30,25);\r\n                    }\r\n                    else {\r\n                        boardView.timeLabel.setLocation(920,25);\r\n                    }\r\n                    boardView.controller.changePlayer();\r\n                }\r\n                if (AI) {\r\n                    changePlayer();\r\n                    AIplayer.EasyAI(board);\r\n                    if (!AIplayer.LastAction) {\r\n                        boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));\r\n                        steps.add(board);\r\n                    } else {\r\n                        boardView.removeChessViewAtGrid(AIplayer.dest);\r\n                        boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));\r\n                        steps.add(board);\r\n                    }\r\n                }\r\n                boardView.repaint();\r\n                component.revalidate();\r\n            }\r\n            checkWin(point);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void clickChess(BoardPoint point, AnimalView component) {\r\n        if (selectedPoint == null) {\r\n            if (board.getChessPlayer(point).equals(currentPlayer)) {\r\n                canStepPoints = getCanStepPoints(point);\r\n                selectedPoint = point;\r\n                component.setSelected(true);\r\n                component.revalidate();\r\n                component.repaint();\r\n                boardView.repaint();\r\n                boardView.revalidate();\r\n            }\r\n        } else if (selectedPoint.getCol() == point.getCol() && selectedPoint.getRow() == point.getRow()) {\r\n            selectedPoint = null;\r\n            canStepPoints = null;\r\n            setAllCellsCanStepFalse();\r\n            component.setSelected(false);\r\n            boardView.repaint();\r\n            boardView.revalidate();\r\n            component.repaint();\r\n            component.revalidate();\r\n            //放下棋子\r\n        } else if (board.canEat(selectedPoint, point)) {\r\n            board.eat(selectedPoint, point);\r\n            eaten = boardView.removeChessViewAtGrid(point);\r\n            boardView.setChessViewAtCell(point, boardView.removeChessViewAtGrid(selectedPoint));\r\n            selectedPoint = null;\r\n            setAllCellsCanStepFalse();\r\n            steps.add(board);\r\n            checkWin(point);\r\n            if (winner != null) {\r\n            } else {\r\n                changePlayer();\r\n                boardView.timer.stop();\r\n                boardView.count=20;\r\n                changePlayer();\r\n                boardView.timeLabel.setText(Integer.toString(boardView.count));\r\n                boardView.timer.start();\r\n                if(boardView.controller.currentPlayer==Player.BLUE){\r\n                    boardView.timeLabel.setLocation(30,25);\r\n                }\r\n                else {\r\n                    boardView.timeLabel.setLocation(920,25);\r\n                }\r\n                boardView.controller.changePlayer();\r\n            }\r\n            if (AI) {\r\n                changePlayer();\r\n                AIplayer.EasyAI(board);\r\n                if (!AIplayer.LastAction) {\r\n                    boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));\r\n                    steps.add(board);\r\n                } else {\r\n                    boardView.removeChessViewAtGrid(AIplayer.dest);\r\n                    boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));\r\n                    steps.add(board);\r\n                }\r\n            }\r\n\r\n\r\n            if (currentPlayer == Player.RED) {\r\n                switch (board.redDead.get(board.redDead.size() - 1).getRank()) {\r\n                    case 1 -> {\r\n                        DeadChessView r1 = new DeadChessView(\"resource/animals/left/grey/1.png\");\r\n                        boardView.redDeadPanel.add(r1.getLabel());\r\n                    }\r\n                    case 2 -> {\r\n                        DeadChessView r2 = new DeadChessView(\"resource/animals/left/grey/2.png\");\r\n                        boardView.redDeadPanel.add(r2.getLabel());\r\n                    }\r\n                    case 3 -> {\r\n                        DeadChessView r3 = new DeadChessView(\"resource/animals/left/grey/3.png\");\r\n                        boardView.redDeadPanel.add(r3.getLabel());\r\n                    }\r\n                    case 4 -> {\r\n                        DeadChessView r4 = new DeadChessView(\"resource/animals/left/grey/4.png\");\r\n                        boardView.redDeadPanel.add(r4.getLabel());\r\n                    }\r\n                    case 5 -> {\r\n                        DeadChessView r5 = new DeadChessView(\"resource/animals/left/grey/5.png\");\r\n                        boardView.redDeadPanel.add(r5.getLabel());\r\n                    }\r\n                    case 6 -> {\r\n                        DeadChessView r6 = new DeadChessView(\"resource/animals/left/grey/6.png\");\r\n                        boardView.redDeadPanel.add(r6.getLabel());\r\n                    }\r\n                    case 7 -> {\r\n                        DeadChessView r7 = new DeadChessView(\"resource/animals/left/grey/7.png\");\r\n                        boardView.redDeadPanel.add(r7.getLabel());\r\n                    }\r\n                    case 8 -> {\r\n                        DeadChessView r8 = new DeadChessView(\"resource/animals/left/grey/8.png\");\r\n                        boardView.redDeadPanel.add(r8.getLabel());\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if (currentPlayer == Player.BLUE) {\r\n                switch (board.blueDead.get(board.blueDead.size() - 1).getRank()) {\r\n                    case 1 -> {\r\n                        DeadChessView r1 = new DeadChessView(\"resource/animals/right/grey/1.png\");\r\n                        boardView.blueDeadPanel.add(r1.getLabel());\r\n                    }\r\n                    case 2 -> {\r\n                        DeadChessView r2 = new DeadChessView(\"resource/animals/right/grey/2.png\");\r\n                        boardView.blueDeadPanel.add(r2.getLabel());\r\n                    }\r\n                    case 3 -> {\r\n                        DeadChessView r3 = new DeadChessView(\"resource/animals/right/grey/3.png\");\r\n                        boardView.blueDeadPanel.add(r3.getLabel());\r\n                    }\r\n                    case 4 -> {\r\n                        DeadChessView r4 = new DeadChessView(\"resource/animals/right/grey/4.png\");\r\n                        boardView.blueDeadPanel.add(r4.getLabel());\r\n                    }\r\n                    case 5 -> {\r\n                        DeadChessView r5 = new DeadChessView(\"resource/animals/right/grey/5.png\");\r\n                        boardView.blueDeadPanel.add(r5.getLabel());\r\n                    }\r\n                    case 6 -> {\r\n                        DeadChessView r6 = new DeadChessView(\"resource/animals/right/grey/6.png\");\r\n                        boardView.blueDeadPanel.add(r6.getLabel());\r\n                    }\r\n                    case 7 -> {\r\n                        DeadChessView r7 = new DeadChessView(\"resource/animals/right/grey/7.png\");\r\n                        boardView.blueDeadPanel.add(r7.getLabel());\r\n                    }\r\n                    case 8 -> {\r\n                        DeadChessView r8 = new DeadChessView(\"resource/animals/right/grey/8.png\");\r\n                        boardView.blueDeadPanel.add(r8.getLabel());\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            boardView.repaint();\r\n            boardView.revalidate();\r\n            component.revalidate();\r\n            if (winner != null) {\r\n                winView();\r\n                reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setAllCellsCanStepFalse() {\r\n        for (int i = 0; i < 7; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                boardView.gridViews[i][j].canStep = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public ArrayList<BoardPoint> getCanStepPoints(BoardPoint src) {\r\n        ArrayList<BoardPoint> list = new ArrayList<>();\r\n        for (int i = 0; i < board.getCanmovepoints(src).size(); i++) {\r\n            boardView.gridViews[board.getCanmovepoints(src).get(i).getRow()][board.getCanmovepoints(src).get(i).getCol()].canStep = true;\r\n            list.add(board.getCanmovepoints(src).get(i));\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public void reset() {\r\n        canStepPoints = null;\r\n        board.initGrid();\r\n        board.initPieces();\r\n        boardView.removeAllChess();\r\n        boardView.initiateChessComponent(board);\r\n        currentPlayer = Player.BLUE;\r\n        boardView.turnLabel.setBounds(930, 120, 100, 100);\r\n        selectedPoint = null;\r\n        setAllCellsCanStepFalse();\r\n        steps.clear();\r\n        //\r\n        boardView.timer.stop();\r\n        boardView.count=20;\r\n        boardView.timeLabel.setText(Integer.toString(boardView.count));\r\n        boardView.timer.start();\r\n        boardView.timeLabel.setLocation(920,25);\r\n        boardView.repaint();\r\n        boardView.revalidate();\r\n        winner = null;\r\n        boardView.redDeadPanel.removeAll();\r\n        boardView.blueDeadPanel.removeAll();\r\n        board.redDead = new ArrayList<>();\r\n        board.blueDead = new ArrayList<>();\r\n        boardView.redDeadPanel.repaint();\r\n        boardView.blueDeadPanel.repaint();\r\n\r\n\r\n    }\r\n\r\n    public void regretOneStep() {\r\n        if (!AI) {\r\n            if (steps.size() == 1) {\r\n                reset();\r\n            } else {\r\n                board.regret();\r\n                changePlayer();\r\n                if (board.steps.get(steps.size() - 1).ismove) {\r\n                    boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));\r\n                } else {\r\n                    boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));\r\n                    boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).dest, eaten);\r\n                }\r\n            }\r\n        } else {\r\n            board.regret();\r\n            changePlayer();\r\n            if (board.steps.get(steps.size() - 1).ismove) {\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));\r\n            } else {\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).dest, eaten);\r\n            }\r\n            board.regret(AI);\r\n            changePlayer();\r\n            if (board.steps.get(steps.size() - 2).ismove) {\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 2).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 2).dest));\r\n            } else {\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 2).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 2).dest));\r\n                boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 2).dest, eaten);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/Controller.java b/src/controller/Controller.java
--- a/src/controller/Controller.java	(revision e6b38a12294199405ebd993ceb40e207911f3be7)
+++ b/src/controller/Controller.java	(date 1684676073408)
@@ -4,7 +4,6 @@
 import listener.GameListener;
 import view.BoardView;
 import view.CellView;
-import view.GameFrame;
 import view.chessView.AnimalView;
 import view.chessView.DeadChessView;
 
@@ -93,16 +92,18 @@
                     boardView.controller.changePlayer();
                 }
                 if (AI) {
-                    changePlayer();
+
                     AIplayer.EasyAI(board);
-                    if (!AIplayer.LastAction) {
+                    if (!AIplayer.LastActioniseat) {
                         boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));
                         steps.add(board);
                     } else {
                         boardView.removeChessViewAtGrid(AIplayer.dest);
                         boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));
                         steps.add(board);
+                        addDeadView();
                     }
+                    currentPlayer=Player.BLUE;
                 }
                 boardView.repaint();
                 component.revalidate();
@@ -158,95 +159,19 @@
                 boardView.controller.changePlayer();
             }
             if (AI) {
-                changePlayer();
                 AIplayer.EasyAI(board);
-                if (!AIplayer.LastAction) {
+                if (!AIplayer.LastActioniseat) {
                     boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));
                     steps.add(board);
                 } else {
                     boardView.removeChessViewAtGrid(AIplayer.dest);
                     boardView.setChessViewAtCell(AIplayer.dest, boardView.removeChessViewAtGrid(AIplayer.src));
                     steps.add(board);
+                    addDeadView();
                 }
+                changePlayer();
             }
-
-
-            if (currentPlayer == Player.RED) {
-                switch (board.redDead.get(board.redDead.size() - 1).getRank()) {
-                    case 1 -> {
-                        DeadChessView r1 = new DeadChessView("resource/animals/left/grey/1.png");
-                        boardView.redDeadPanel.add(r1.getLabel());
-                    }
-                    case 2 -> {
-                        DeadChessView r2 = new DeadChessView("resource/animals/left/grey/2.png");
-                        boardView.redDeadPanel.add(r2.getLabel());
-                    }
-                    case 3 -> {
-                        DeadChessView r3 = new DeadChessView("resource/animals/left/grey/3.png");
-                        boardView.redDeadPanel.add(r3.getLabel());
-                    }
-                    case 4 -> {
-                        DeadChessView r4 = new DeadChessView("resource/animals/left/grey/4.png");
-                        boardView.redDeadPanel.add(r4.getLabel());
-                    }
-                    case 5 -> {
-                        DeadChessView r5 = new DeadChessView("resource/animals/left/grey/5.png");
-                        boardView.redDeadPanel.add(r5.getLabel());
-                    }
-                    case 6 -> {
-                        DeadChessView r6 = new DeadChessView("resource/animals/left/grey/6.png");
-                        boardView.redDeadPanel.add(r6.getLabel());
-                    }
-                    case 7 -> {
-                        DeadChessView r7 = new DeadChessView("resource/animals/left/grey/7.png");
-                        boardView.redDeadPanel.add(r7.getLabel());
-                    }
-                    case 8 -> {
-                        DeadChessView r8 = new DeadChessView("resource/animals/left/grey/8.png");
-                        boardView.redDeadPanel.add(r8.getLabel());
-                    }
-                }
-            }
-
-
-            if (currentPlayer == Player.BLUE) {
-                switch (board.blueDead.get(board.blueDead.size() - 1).getRank()) {
-                    case 1 -> {
-                        DeadChessView r1 = new DeadChessView("resource/animals/right/grey/1.png");
-                        boardView.blueDeadPanel.add(r1.getLabel());
-                    }
-                    case 2 -> {
-                        DeadChessView r2 = new DeadChessView("resource/animals/right/grey/2.png");
-                        boardView.blueDeadPanel.add(r2.getLabel());
-                    }
-                    case 3 -> {
-                        DeadChessView r3 = new DeadChessView("resource/animals/right/grey/3.png");
-                        boardView.blueDeadPanel.add(r3.getLabel());
-                    }
-                    case 4 -> {
-                        DeadChessView r4 = new DeadChessView("resource/animals/right/grey/4.png");
-                        boardView.blueDeadPanel.add(r4.getLabel());
-                    }
-                    case 5 -> {
-                        DeadChessView r5 = new DeadChessView("resource/animals/right/grey/5.png");
-                        boardView.blueDeadPanel.add(r5.getLabel());
-                    }
-                    case 6 -> {
-                        DeadChessView r6 = new DeadChessView("resource/animals/right/grey/6.png");
-                        boardView.blueDeadPanel.add(r6.getLabel());
-                    }
-                    case 7 -> {
-                        DeadChessView r7 = new DeadChessView("resource/animals/right/grey/7.png");
-                        boardView.blueDeadPanel.add(r7.getLabel());
-                    }
-                    case 8 -> {
-                        DeadChessView r8 = new DeadChessView("resource/animals/right/grey/8.png");
-                        boardView.blueDeadPanel.add(r8.getLabel());
-                    }
-                }
-            }
-
-
+            addDeadView();
             boardView.repaint();
             boardView.revalidate();
             component.revalidate();
@@ -300,32 +225,45 @@
         board.blueDead = new ArrayList<>();
         boardView.redDeadPanel.repaint();
         boardView.blueDeadPanel.repaint();
-
-
     }
 
     public void regretOneStep() {
+        //AI模式关闭
         if (!AI) {
             if (steps.size() == 1) {
                 reset();
             } else {
                 board.regret();
-                changePlayer();
                 if (board.steps.get(steps.size() - 1).ismove) {
                     boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));
-                } else {
+                }
+                else {
                     boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));
                     boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).dest, eaten);
+                    if(currentPlayer==Player.BLUE){
+                        boardView.redDeadPanel.remove(board.blueDead.size());
+                        boardView.redDeadPanel.repaint();
+                    }
+                    else{
+                        boardView.blueDeadPanel.remove(board.redDead.size());
+                        boardView.blueDeadPanel.repaint();
+                    }
                 }
+                changePlayer();
             }
-        } else {
+        }
+        //AI模式开启
+        else {
             board.regret();
             changePlayer();
             if (board.steps.get(steps.size() - 1).ismove) {
                 boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));
-            } else {
+            }
+            else {
                 boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 1).dest));
                 boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 1).dest, eaten);
+                boardView.redDeadPanel.remove(board.blueDead.size());
+                boardView.redDeadPanel.repaint();
             }
             board.regret(AI);
             changePlayer();
@@ -334,6 +272,168 @@
             } else {
                 boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 2).src, boardView.removeChessViewAtGrid(board.steps.get(board.steps.size() - 2).dest));
                 boardView.setChessViewAtCell(board.steps.get(board.steps.size() - 2).dest, eaten);
+                boardView.blueDeadPanel.remove(board.redDead.size()-1);
+                boardView.blueDeadPanel.repaint();
+            }
+        }
+    }
+
+    public void addDeadView(){
+        if(!AI){
+            if (currentPlayer == Player.RED) {
+                switch (board.redDead.get(board.redDead.size() - 1).getRank()) {
+                    case 1 -> {
+                        DeadChessView r1 = new DeadChessView("resource/animals/right/grey/1.png");
+                        boardView.blueDeadPanel.add(r1.getLabel());
+                    }
+                    case 2 -> {
+                        DeadChessView r2 = new DeadChessView("resource/animals/right/grey/2.png");
+                        boardView.blueDeadPanel.add(r2.getLabel());
+                    }
+                    case 3 -> {
+                        DeadChessView r3 = new DeadChessView("resource/animals/right/grey/3.png");
+                        boardView.blueDeadPanel.add(r3.getLabel());
+                    }
+                    case 4 -> {
+                        DeadChessView r4 = new DeadChessView("resource/animals/right/grey/4.png");
+                        boardView.blueDeadPanel.add(r4.getLabel());
+                    }
+                    case 5 -> {
+                        DeadChessView r5 = new DeadChessView("resource/animals/right/grey/5.png");
+                        boardView.blueDeadPanel.add(r5.getLabel());
+                    }
+                    case 6 -> {
+                        DeadChessView r6 = new DeadChessView("resource/animals/right/grey/6.png");
+                        boardView.blueDeadPanel.add(r6.getLabel());
+                    }
+                    case 7 -> {
+                        DeadChessView r7 = new DeadChessView("resource/animals/right/grey/7.png");
+                        boardView.blueDeadPanel.add(r7.getLabel());
+                    }
+                    case 8 -> {
+                        DeadChessView r8 = new DeadChessView("resource/animals/right/grey/8.png");
+                        boardView.blueDeadPanel.add(r8.getLabel());
+                    }
+                }
+            }
+            if (currentPlayer == Player.BLUE) {
+                switch (board.blueDead.get(board.blueDead.size() - 1).getRank()) {
+                    case 1 -> {
+                        DeadChessView r1 = new DeadChessView("resource/animals/left/grey/1.png");
+                        boardView.redDeadPanel.add(r1.getLabel());
+                    }
+                    case 2 -> {
+                        DeadChessView r2 = new DeadChessView("resource/animals/left/grey/2.png");
+                        boardView.redDeadPanel.add(r2.getLabel());
+                    }
+                    case 3 -> {
+                        DeadChessView r3 = new DeadChessView("resource/animals/left/grey/3.png");
+                        boardView.redDeadPanel.add(r3.getLabel());
+                    }
+                    case 4 -> {
+                        DeadChessView r4 = new DeadChessView("resource/animals/left/grey/4.png");
+                        boardView.redDeadPanel.add(r4.getLabel());
+                    }
+                    case 5 -> {
+                        DeadChessView r5 = new DeadChessView("resource/animals/left/grey/5.png");
+                        boardView.redDeadPanel.add(r5.getLabel());
+                    }
+                    case 6 -> {
+                        DeadChessView r6 = new DeadChessView("resource/animals/left/grey/6.png");
+                        boardView.redDeadPanel.add(r6.getLabel());
+                    }
+                    case 7 -> {
+                        DeadChessView r7 = new DeadChessView("resource/animals/left/grey/7.png");
+                        boardView.redDeadPanel.add(r7.getLabel());
+                    }
+                    case 8 -> {
+                        DeadChessView r8 = new DeadChessView("resource/animals/left/grey/8.png");
+                        boardView.redDeadPanel.add(r8.getLabel());
+                    }
+                }
+            }
+        }
+        else{
+            if (currentPlayer == Player.RED) {
+                switch (board.blueDead.get(board.blueDead.size() - 1).getRank()) {
+                    case 1 -> {
+                        DeadChessView r1 = new DeadChessView("resource/animals/left/grey/1.png");
+                        boardView.redDeadPanel.add(r1.getLabel());
+                    }
+                    case 2 -> {
+                        DeadChessView r2 = new DeadChessView("resource/animals/left/grey/2.png");
+                        boardView.redDeadPanel.add(r2.getLabel());
+                    }
+                    case 3 -> {
+                        DeadChessView r3 = new DeadChessView("resource/animals/left/grey/3.png");
+                        boardView.redDeadPanel.add(r3.getLabel());
+                    }
+                    case 4 -> {
+                        DeadChessView r4 = new DeadChessView("resource/animals/left/grey/4.png");
+                        boardView.redDeadPanel.add(r4.getLabel());
+                    }
+                    case 5 -> {
+                        DeadChessView r5 = new DeadChessView("resource/animals/left/grey/5.png");
+                        boardView.redDeadPanel.add(r5.getLabel());
+                    }
+                    case 6 -> {
+                        DeadChessView r6 = new DeadChessView("resource/animals/left/grey/6.png");
+                        boardView.redDeadPanel.add(r6.getLabel());
+                    }
+                    case 7 -> {
+                        DeadChessView r7 = new DeadChessView("resource/animals/left/grey/7.png");
+                        boardView.redDeadPanel.add(r7.getLabel());
+                    }
+                    case 8 -> {
+                        DeadChessView r8 = new DeadChessView("resource/animals/left/grey/8.png");
+                        boardView.redDeadPanel.add(r8.getLabel());
+                    }
+                }
+            }
+            if (currentPlayer == Player.BLUE) {
+                switch (board.redDead.get(board.redDead.size() - 1).getRank()) {
+                    case 1 -> {
+                        DeadChessView r1 = new DeadChessView("resource/animals/right/grey/1.png");
+                        boardView.blueDeadPanel.add(r1.getLabel());
+                    }
+                    case 2 -> {
+                        DeadChessView r2 = new DeadChessView("resource/animals/right/grey/2.png");
+                        boardView.blueDeadPanel.add(r2.getLabel());
+                    }
+                    case 3 -> {
+                        DeadChessView r3 = new DeadChessView("resource/animals/right/grey/3.png");
+                        boardView.blueDeadPanel.add(r3.getLabel());
+                    }
+                    case 4 -> {
+                        DeadChessView r4 = new DeadChessView("resource/animals/right/grey/4.png");
+                        boardView.blueDeadPanel.add(r4.getLabel());
+                    }
+                    case 5 -> {
+                        DeadChessView r5 = new DeadChessView("resource/animals/right/grey/5.png");
+                        boardView.blueDeadPanel.add(r5.getLabel());
+                    }
+                    case 6 -> {
+                        DeadChessView r6 = new DeadChessView("resource/animals/right/grey/6.png");
+                        boardView.blueDeadPanel.add(r6.getLabel());
+                    }
+                    case 7 -> {
+                        DeadChessView r7 = new DeadChessView("resource/animals/right/grey/7.png");
+                        boardView.blueDeadPanel.add(r7.getLabel());
+                    }
+                    case 8 -> {
+                        DeadChessView r8 = new DeadChessView("resource/animals/right/grey/8.png");
+                        boardView.blueDeadPanel.add(r8.getLabel());
+                    }
+                }
+            }
+        }
+    }
+    public void run() {
+        for(int i=0;i<1;i++){
+            try {
+                Thread.sleep(1000L);  //间隔1秒执行一次！
+            } catch (Exception e) {
+                System.err.println(e.getClass().getName() + ": " + e.getMessage());
             }
         }
     }
Index: src/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Board {\r\n    public Cell[][] grid;\r\n    public ArrayList<Step> steps=new ArrayList<>();\r\n    public ArrayList<Chess> blueDead;\r\n    public ArrayList<Chess> redDead;\r\n    Chess  BlueRat=new Chess(Player.BLUE,1);\r\n    Chess  BlueCat=new Chess(Player.BLUE,2);\r\n    Chess  BlueDog=new Chess(Player.BLUE,3);\r\n    Chess  BlueWolf=new Chess(Player.BLUE,4);\r\n    Chess  BlueLeopard=new Chess(Player.BLUE,5);\r\n    Chess  BlueTiger=new Chess(Player.BLUE,6);\r\n    Chess  BlueLion=new Chess(Player.BLUE,7);\r\n    Chess  BlueElephant=new Chess(Player.BLUE,8);\r\n\r\n    Chess  RedRat=new Chess(Player.RED,1);\r\n    Chess  RedCat=new Chess(Player.RED,2);\r\n    Chess  RedDog=new Chess(Player.RED,3);\r\n    Chess  RedWolf=new Chess(Player.RED,4);\r\n    Chess  RedLeopard=new Chess(Player.RED,5);\r\n    Chess  RedTiger=new Chess(Player.RED,6);\r\n    Chess  RedLion=new Chess(Player.RED,7);\r\n    Chess  RedElephant=new Chess(Player.RED,8);\r\n    public Board() {\r\n        this.grid = new Cell[7][9];\r\n        blueDead = new ArrayList<>();\r\n        redDead = new ArrayList<>();\r\n\r\n        initGrid();\r\n        initPieces();\r\n    }\r\n\r\n    public void initGrid() {\r\n        for (int i = 0; i < Constant.CHESSBOARD_ROW_SIZE.getNum(); i++) {\r\n            for (int j = 0; j < Constant.CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                grid[i][j] = new Cell();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initPieces() {\r\n        for (int i = 0; i < Constant.CHESSBOARD_ROW_SIZE.getNum(); i++) {\r\n            for (int j = 0; j < Constant.CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                grid[i][j].removeChess();\r\n            }\r\n        }\r\n        grid[0][0].setChess(RedLion);\r\n        grid[1][1].setChess(RedDog);\r\n        grid[2][2].setChess(RedLeopard);\r\n        grid[0][2].setChess(RedRat);\r\n        grid[4][2].setChess(RedWolf);\r\n        grid[5][1].setChess(RedCat);\r\n        grid[6][0].setChess(RedTiger);\r\n        grid[6][2].setChess(RedElephant);\r\n\r\n        grid[0][6].setChess(BlueElephant);\r\n        grid[0][8].setChess(BlueTiger);\r\n        grid[1][7].setChess(BlueCat);\r\n        grid[2][6].setChess(BlueWolf);\r\n        grid[4][6].setChess(BlueLeopard);\r\n        grid[5][7].setChess(BlueDog);\r\n        grid[6][6].setChess(BlueRat);\r\n        grid[6][8].setChess(BlueLion);\r\n    }\r\n\r\n    public Cell[][] getGrid() {\r\n        return grid;\r\n    }\r\n\r\n    public Player getChessPlayer(BoardPoint point) {\r\n        return getCellAt(point).getChess().getPlayer();\r\n    }\r\n\r\n    public Cell getCellAt(BoardPoint point) {\r\n        return grid[point.getRow()][point.getCol()];\r\n    }\r\n\r\n    public Chess getChessAt(BoardPoint point) {\r\n        return getCellAt(point).getChess();\r\n    }\r\n\r\n    private void setChess(BoardPoint point, Chess chess) {\r\n        getCellAt(point).setChess(chess);\r\n        if (isOpponentTrap(point, chess.getPlayer())) {\r\n            chess.rank = 0;\r\n        }\r\n    }\r\n\r\n    private Chess removeChess(BoardPoint point) {\r\n        Chess chess = getChessAt(point);\r\n        getCellAt(point).removeChess();\r\n        return chess;\r\n    }\r\n    public boolean canMove(BoardPoint src, BoardPoint dest) {\r\n        boolean judge=false;\r\n        for(int i=0;i<getCanmovepoints(src).size();i++){\r\n            if(getCanmovepoints(src).get(i).getRow()==dest.getRow()&&getCanmovepoints(src).get(i).getCol()==dest.getCol()){\r\n                judge=true;\r\n                break;\r\n            }\r\n        }\r\n        return judge;\r\n    }\r\n    public void move(BoardPoint src, BoardPoint dest) {\r\n        if(isOpponentTrap(dest,getChessPlayer(src))){\r\n            Step step=new Step(src,dest,getChessAt(src));\r\n            steps.add(step);\r\n            setChess(dest, getChessAt(src));\r\n            removeChess(src);\r\n            getChessAt(dest).setRank(0);\r\n        }\r\n        else if(isOpponentTrap(src,getChessPlayer(src))&&!isOpponentTrap(dest,getChessPlayer(src))){\r\n            Step step=new Step(src,dest,getChessAt(src));\r\n            steps.add(step);\r\n            getChessAt(src).setRank(getChessAt(src).getFinalRank());\r\n            setChess(dest, getChessAt(src));\r\n            removeChess(src);\r\n        }\r\n        else{\r\n            Step step=new Step(src,dest,getChessAt(src));\r\n            steps.add(step);\r\n            setChess(dest, getChessAt(src));\r\n            removeChess(src);\r\n        }\r\n    }\r\n    public ArrayList<BoardPoint> getCanmovepoints(BoardPoint src){\r\n        ArrayList<BoardPoint> list=new ArrayList<BoardPoint>();\r\n        if(getChessAt(src)==RedRat||getChessAt(src)==BlueRat){\r\n            //鼠鼠的Move判断//\r\n           if(src.getRow()!=0){\r\n               BoardPoint dest=new BoardPoint(src.getRow()-1,src.getCol());\r\n               if(grid[src.getRow()-1][src.getCol()].chess!=null){\r\n                   if(!isRiver(src)){\r\n                       if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                           if(grid[src.getRow()-1][src.getCol()].chess.rank<=getChessAt(src).rank){\r\n                               list.add(dest);\r\n                           }\r\n                           else if(grid[src.getRow()-1][src.getCol()].chess.rank==8){\r\n                               list.add(dest);\r\n                           }\r\n                       }\r\n                   }\r\n               }\r\n               else if(isOwnDens(dest,getChessPlayer(src))){}\r\n               else {\r\n                   list.add(dest);\r\n               }\r\n           }\r\n            if(src.getRow()!=6){\r\n                BoardPoint dest=new BoardPoint(src.getRow()+1,src.getCol());\r\n                if(grid[src.getRow()+1][src.getCol()].chess!=null){\r\n                    if(!isRiver(src)){\r\n                        if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                            if(grid[src.getRow()+1][src.getCol()].chess.rank<=getChessAt(src).rank){\r\n                                list.add(dest);\r\n                            }\r\n                            else if(grid[src.getRow()+1][src.getCol()].chess.rank==8){\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=0){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()-1);\r\n                if(grid[src.getRow()][src.getCol()-1].chess!=null){\r\n                    if(!isRiver(src)){\r\n                        if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                            if(grid[src.getRow()][src.getCol()-1].chess.rank<=getChessAt(src).rank){\r\n                                list.add(dest);\r\n                            }\r\n                            else if(grid[src.getRow()][src.getCol()-1].chess.rank==8){\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=8){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()+1);\r\n                if(grid[src.getRow()][src.getCol()+1].chess!=null){\r\n                    if(!isRiver(src)){\r\n                        if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                            if(grid[src.getRow()][src.getCol()+1].chess.rank<=getChessAt(src).rank){\r\n                                list.add(dest);\r\n                            }\r\n                            else if(grid[src.getRow()][src.getCol()+1].chess.rank==8){\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else {\r\n                    list.add(dest);\r\n                }\r\n            }\r\n        }\r\n        else if(getChessAt(src)==RedTiger||getChessAt(src)==RedLion||getChessAt(src)==BlueTiger||getChessAt(src)==BlueLion){\r\n            //狮子老虎的Move判断//\r\n            if(src.getRow()!=0){\r\n                BoardPoint dest=new BoardPoint(src.getRow()-1,src.getCol());\r\n                if(grid[src.getRow()-1][src.getCol()].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()-1][src.getCol()].chess.rank<=getChessAt(src).rank){\r\n                            list.add(dest);\r\n                        }\r\n                    }\r\n                }\r\n                else if(isRiver(dest)){\r\n                    if(grid[src.getRow()-1][src.getCol()].chess!=null||grid[src.getRow()-2][src.getCol()].chess!=null){}\r\n                    else if(grid[src.getRow()-3][src.getCol()].chess!=null&&(grid[src.getRow()-3][src.getCol()].chess.rank>getChessAt(src).rank||grid[src.getRow()-3][src.getCol()].chess.getPlayer()==getChessPlayer(src))){}\r\n                    else{\r\n                        BoardPoint overRiver=new BoardPoint(src.getRow()-3,src.getCol());\r\n                        list.add(overRiver);\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getRow()!=6){\r\n                BoardPoint dest=new BoardPoint(src.getRow()+1,src.getCol());\r\n                if(grid[src.getRow()+1][src.getCol()].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()+1][src.getCol()].chess.rank<=getChessAt(src).rank){\r\n                            list.add(dest);\r\n                        }\r\n                    }\r\n                }\r\n                else if(isRiver(dest)){\r\n                    if(grid[src.getRow()+1][src.getCol()].chess!=null||grid[src.getRow()+2][src.getCol()].chess!=null){}\r\n                    else if(grid[src.getRow()+3][src.getCol()].chess!=null&&(grid[src.getRow()+3][src.getCol()].chess.rank>getChessAt(src).rank||grid[src.getRow()+3][src.getCol()].chess.getPlayer()==getChessPlayer(src))){}\r\n                    else{\r\n                        BoardPoint overRiver=new BoardPoint(src.getRow()+3,src.getCol());\r\n                        list.add(overRiver);\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=0){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()-1);\r\n                if(grid[src.getRow()][src.getCol()-1].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()][src.getCol()-1].chess.rank<=getChessAt(src).rank){\r\n                            list.add(dest);\r\n                        }\r\n                    }\r\n                }\r\n                else if(isRiver(dest)){\r\n                    if(grid[src.getRow()][src.getCol()-1].chess!=null||grid[src.getRow()][src.getCol()-2].chess!=null||grid[src.getRow()][src.getCol()-3].chess!=null){}\r\n                    else if(grid[src.getRow()][src.getCol()-4].chess!=null&&(grid[src.getRow()][src.getCol()-4].chess.rank>getChessAt(src).rank||grid[src.getRow()][src.getCol()-4].chess.getPlayer()==getChessPlayer(src))){}\r\n                    else{\r\n                        BoardPoint overRiver=new BoardPoint(src.getRow(),src.getCol()-4);\r\n                        list.add(overRiver);\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=8){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()+1);\r\n                if(grid[src.getRow()][src.getCol()+1].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()][src.getCol()+1].chess.rank<=getChessAt(src).rank){\r\n                            list.add(dest);\r\n                        }\r\n                    }\r\n                }\r\n                else if(isRiver(dest)){\r\n                    if(grid[src.getRow()][src.getCol()+1].chess!=null||grid[src.getRow()][src.getCol()+2].chess!=null||grid[src.getRow()][src.getCol()+3].chess!=null){}\r\n                    else if(grid[src.getRow()][src.getCol()+4].chess!=null&&(grid[src.getRow()][src.getCol()+4].chess.rank>getChessAt(src).rank||grid[src.getRow()][src.getCol()+4].chess.getPlayer()==getChessPlayer(src))){}\r\n                    else{\r\n                        BoardPoint overRiver=new BoardPoint(src.getRow(),src.getCol()+4);\r\n                        list.add(overRiver);\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else{\r\n                    list.add(dest);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            //其他动物的Move判断//\r\n            if(src.getRow()!=0){\r\n                BoardPoint dest=new BoardPoint(src.getRow()-1,src.getCol());\r\n                if(grid[src.getRow()-1][src.getCol()].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()-1][src.getCol()].chess.rank==1&&getChessAt(src).rank==8){}\r\n                        else {\r\n                            if (grid[src.getRow() - 1][src.getCol()].chess.rank <= getChessAt(src).rank) {\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else if(!isRiver(dest)){\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getRow()!=6){\r\n                BoardPoint dest=new BoardPoint(src.getRow()+1,src.getCol());\r\n                if(grid[src.getRow()+1][src.getCol()].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()+1][src.getCol()].chess.rank==1&&getChessAt(src).rank==8){}\r\n                        else {\r\n                            if (grid[src.getRow()+1][src.getCol()].chess.rank <= getChessAt(src).rank) {\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else if(!isRiver(dest)){\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=0){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()-1);\r\n                if(grid[src.getRow()][src.getCol()-1].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()][src.getCol()-1].chess.rank==1&&getChessAt(src).rank==8){}\r\n                        else {\r\n                            if (grid[src.getRow()][src.getCol()-1].chess.rank <= getChessAt(src).rank) {\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else if(!isRiver(dest)){\r\n                    list.add(dest);\r\n                }\r\n            }\r\n            if(src.getCol()!=8){\r\n                BoardPoint dest=new BoardPoint(src.getRow(),src.getCol()+1);\r\n                if(grid[src.getRow()][src.getCol()+1].chess!=null&&!isRiver(dest)){\r\n                    if(getChessPlayer(dest)!=getChessPlayer(src)){\r\n                        if(grid[src.getRow()][src.getCol()+1].chess.rank==1&&getChessAt(src).rank==8){}\r\n                        else {\r\n                            if (grid[src.getRow()][src.getCol()+1].chess.rank <= getChessAt(src).rank) {\r\n                                list.add(dest);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if(isOwnDens(dest,getChessPlayer(src))){}\r\n                else if(!isRiver(dest)){\r\n                    list.add(dest);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    public boolean canEat(BoardPoint src, BoardPoint dest) {\r\n        Chess attacker = getChessAt(src);\r\n        if(getChessAt(dest)!=null){\r\n            Chess defender = getChessAt(dest);\r\n            if(attacker.getPlayer().getColor()!=defender.getPlayer().getColor()){\r\n                if(canMove(src,dest)){\r\n                    if(attacker.rank>=defender.rank){\r\n                        return true;\r\n                    }\r\n                    else if(attacker.rank==1&&defender.rank==8){\r\n                        return true;\r\n                    }\r\n                    else{\r\n                        return false;\r\n                    }\r\n                }\r\n                else{\r\n                    return false;\r\n                }\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    public boolean isRiver(BoardPoint point) {\r\n        if(((point.getRow()==1||point.getRow()==2||point.getRow()==4||point.getRow()==5)&&(point.getCol()==3||point.getCol()==4||point.getCol()==5))){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    public void eat(BoardPoint src, BoardPoint dest) {\r\n        Chess attacker = getChessAt(src);\r\n        Chess defender = getChessAt(dest);\r\n        if(canEat(src,dest)){\r\n            if(getChessAt(dest)!=null&&isOpponentTrap(dest,getChessPlayer(dest))){\r\n                getChessAt(dest).setRank(getChessAt(dest).getFinalRank());\r\n                removeChess(src);\r\n                removeChess(dest);\r\n                setChess(dest, attacker);\r\n                if(defender.getPlayer()==Player.BLUE) {\r\n                    blueDead.add(defender);\r\n                }\r\n                else{\r\n                    redDead.add(defender);\r\n                }\r\n            }\r\n            else{\r\n                removeChess(src);\r\n                removeChess(dest);\r\n                setChess(dest, attacker);\r\n                if(defender.getPlayer()==Player.BLUE) {\r\n                    blueDead.add(defender);\r\n                }\r\n                else{\r\n                    redDead.add(defender);\r\n                }\r\n            }\r\n            Step step=new Step(src,dest,defender,attacker);\r\n            step.ismove=false;\r\n            steps.add(step);\r\n        }\r\n    }\r\n    public boolean isOwnDens(BoardPoint point, Player color) {\r\n        if((color==Player.BLUE&&point.getRow()==3&&point.getCol()==8)||(color==Player.RED&&point.getRow()==3&&point.getCol()==0)){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    public boolean isOpponentDens(BoardPoint point, Player color) {\r\n        if((color==Player.RED&&point.getRow()==3&&point.getCol()==8)||(color==Player.BLUE&&point.getRow()==3&&point.getCol()==0)){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean isOpponentTrap(BoardPoint point, Player color) {\r\n        if(color==Player.BLUE&&((point.getCol()==0&&(point.getRow()==2||point.getRow()==4))||(point.getRow()==3&&point.getCol()==1))){\r\n            return true;\r\n        }\r\n        else if(color==Player.RED&&((point.getCol()==8&&(point.getRow()==2||point.getRow()==4))||(point.getCol()==7&&point.getRow()==3))){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    public BoardPoint getChessPoint(Chess chess){\r\n        BoardPoint ChessPoint = null;\r\n        for (int i = 0; i < Constant.CHESSBOARD_ROW_SIZE.getNum(); i++) {\r\n            for (int j = 0; j < Constant.CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                BoardPoint point=new BoardPoint(i,j);\r\n                if(getChessAt(point)==chess){\r\n                    ChessPoint=point;\r\n                }\r\n            }\r\n        }\r\n        return ChessPoint;\r\n    }\r\n\r\n    public Chess getAIChess(int rank){\r\n        Chess AIChess=null;\r\n        if(rank==1&&getChessPoint(RedRat)!=null&&getCanmovepoints(getChessPoint(RedRat))!=null){\r\n            AIChess=RedRat;\r\n        }\r\n        if(rank==2&&getChessPoint(RedCat)!=null&&getCanmovepoints(getChessPoint(RedCat))!=null){\r\n            AIChess=RedCat;\r\n        }\r\n        if(rank==3&&getChessPoint(RedDog)!=null&&getCanmovepoints(getChessPoint(RedDog))!=null){\r\n            AIChess=RedDog;\r\n        }\r\n        if(rank==4&&getChessPoint(RedWolf)!=null&&getCanmovepoints(getChessPoint(RedWolf))!=null){\r\n            AIChess=RedWolf;\r\n        }\r\n        if(rank==5&&getChessPoint(RedLeopard)!=null&&getCanmovepoints(getChessPoint(RedLeopard))!=null){\r\n            AIChess=RedLeopard;\r\n        }\r\n        if(rank==6&&getChessPoint(RedTiger)!=null&&getCanmovepoints(getChessPoint(RedTiger))!=null){\r\n            AIChess=RedTiger;\r\n        }\r\n        if(rank==7&&getChessPoint(RedLion)!=null&&getCanmovepoints(getChessPoint(RedLion))!=null){\r\n            AIChess=RedLion;\r\n        }\r\n        if(rank==8&&getChessPoint(RedElephant)!=null&&getCanmovepoints(getChessPoint(RedElephant))!=null){\r\n            AIChess=RedElephant;\r\n        }\r\n        return AIChess;\r\n    }\r\n    public void regret(){\r\n        if(steps.get(steps.size()-1).ismove){\r\n            if(isOpponentTrap(steps.get(steps.size()-1).src,getChessPlayer(steps.get(steps.size()-1).dest))){\r\n                setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));\r\n                removeChess(steps.get(steps.size()-1).dest);\r\n                getChessAt(steps.get(steps.size()-1).src).setRank(0);\r\n            }\r\n            else if(isOpponentTrap(steps.get(steps.size()-1).dest,getChessPlayer(steps.get(steps.size()-1).dest))){\r\n                getChessAt(steps.get(steps.size()-1).dest).setRank(getChessAt(steps.get(steps.size()-1).dest).getFinalRank());\r\n                setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));\r\n                removeChess(steps.get(steps.size()-1).dest);\r\n            }\r\n            else{\r\n                setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));\r\n                removeChess(steps.get(steps.size()-1).dest);\r\n            }\r\n        }\r\n        else{\r\n            removeChess(steps.get(steps.size()-1).dest);\r\n            Chess attacker=steps.get(steps.size()-1).eater;\r\n            Chess defender=steps.get(steps.size()-1).eated;\r\n            setChess(steps.get(steps.size()-1).src,attacker);\r\n            setChess(steps.get(steps.size()-1).dest,defender);\r\n            if(steps.get(steps.size()-1).eated.getPlayer()==Player.BLUE){\r\n                blueDead.remove(blueDead.size()-1);\r\n            }\r\n            else{\r\n                redDead.remove(redDead.size()-1);\r\n            }\r\n        }\r\n    }\r\n    public void regret(Boolean AI){\r\n        if(steps.get(steps.size()-2).ismove){\r\n            if(isOpponentTrap(steps.get(steps.size()-2).src,getChessPlayer(steps.get(steps.size()-2).dest))){\r\n                setChess(steps.get(steps.size()-2).src, getChessAt(steps.get(steps.size()-2).dest));\r\n                removeChess(steps.get(steps.size()-2).dest);\r\n                getChessAt(steps.get(steps.size()-2).src).setRank(0);\r\n            }\r\n            else if(isOpponentTrap(steps.get(steps.size()-2).dest,getChessPlayer(steps.get(steps.size()-2).dest))){\r\n                getChessAt(steps.get(steps.size()-2).dest).setRank(getChessAt(steps.get(steps.size()-2).dest).getFinalRank());\r\n                setChess(steps.get(steps.size()-2).src, getChessAt(steps.get(steps.size()-2).dest));\r\n                removeChess(steps.get(steps.size()-2).dest);\r\n            }\r\n            else{\r\n                setChess(steps.get(steps.size()-2).src, getChessAt(steps.get(steps.size()-2).dest));\r\n                removeChess(steps.get(steps.size()-2).dest);\r\n            }\r\n        }\r\n        else{\r\n            removeChess(steps.get(steps.size()-2).dest);\r\n            Chess attacker=steps.get(steps.size()-2).eater;\r\n            Chess defender=steps.get(steps.size()-2).eated;\r\n            setChess(steps.get(steps.size()-2).src,attacker);\r\n            setChess(steps.get(steps.size()-2).dest,defender);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Board.java b/src/model/Board.java
--- a/src/model/Board.java	(revision e6b38a12294199405ebd993ceb40e207911f3be7)
+++ b/src/model/Board.java	(date 1684677277919)
@@ -509,14 +509,13 @@
         return AIChess;
     }
     public void regret(){
-        if(steps.get(steps.size()-1).ismove){
             if(isOpponentTrap(steps.get(steps.size()-1).src,getChessPlayer(steps.get(steps.size()-1).dest))){
                 setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));
                 removeChess(steps.get(steps.size()-1).dest);
                 getChessAt(steps.get(steps.size()-1).src).setRank(0);
             }
             else if(isOpponentTrap(steps.get(steps.size()-1).dest,getChessPlayer(steps.get(steps.size()-1).dest))){
-                getChessAt(steps.get(steps.size()-1).dest).setRank(getChessAt(steps.get(steps.size()-1).dest).getFinalRank());
+                getChessAt(steps.get(steps.size()-1).dest).setRank(getChessAt(steps.get(steps.size()-1).src).getFinalRank());
                 setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));
                 removeChess(steps.get(steps.size()-1).dest);
             }
@@ -524,8 +523,7 @@
                 setChess(steps.get(steps.size()-1).src, getChessAt(steps.get(steps.size()-1).dest));
                 removeChess(steps.get(steps.size()-1).dest);
             }
-        }
-        else{
+        if(!steps.get(steps.size()-1).ismove){
             removeChess(steps.get(steps.size()-1).dest);
             Chess attacker=steps.get(steps.size()-1).eater;
             Chess defender=steps.get(steps.size()-1).eated;
@@ -544,10 +542,10 @@
             if(isOpponentTrap(steps.get(steps.size()-2).src,getChessPlayer(steps.get(steps.size()-2).dest))){
                 setChess(steps.get(steps.size()-2).src, getChessAt(steps.get(steps.size()-2).dest));
                 removeChess(steps.get(steps.size()-2).dest);
-                getChessAt(steps.get(steps.size()-2).src).setRank(0);
+                getChessAt(steps.get(steps.size()-2).src).setRank(getChessAt(steps.get(steps.size()-1).src).getFinalRank());
             }
             else if(isOpponentTrap(steps.get(steps.size()-2).dest,getChessPlayer(steps.get(steps.size()-2).dest))){
-                getChessAt(steps.get(steps.size()-2).dest).setRank(getChessAt(steps.get(steps.size()-2).dest).getFinalRank());
+                getChessAt(steps.get(steps.size()-2).dest).setRank(0);
                 setChess(steps.get(steps.size()-2).src, getChessAt(steps.get(steps.size()-2).dest));
                 removeChess(steps.get(steps.size()-2).dest);
             }
@@ -564,5 +562,4 @@
             setChess(steps.get(steps.size()-2).dest,defender);
         }
     }
-
 }
Index: src/model/AI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\nimport view.BoardView;\r\n\r\nimport java.util.Random;\r\npublic class AI {\r\n    private Player AIplayer=Player.RED;\r\n    public BoardPoint src;\r\n    public BoardPoint dest;\r\n    public boolean LastAction=false;\r\n    public void EasyAI(Board board){\r\n        Random random=new Random();\r\n        int chooseChess=random.nextInt(1,8);\r\n        int chooseStep= random.nextInt(0,3);\r\n        while(board.getAIChess(chooseChess)==null||board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).size()<=chooseStep){\r\n            chooseChess=random.nextInt(1,8);\r\n            chooseStep=random.nextInt(0,3);\r\n        }\r\n        if(chooseStep==0&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(0))){\r\n            src=board.getChessPoint(board.getAIChess(chooseChess));\r\n            dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(0);\r\n            if(board.canEat(src,dest)){\r\n                board.eat(src,dest);\r\n                LastAction=true;\r\n            }\r\n            else{\r\n                board.move(src,dest);\r\n                LastAction=false;\r\n            }\r\n        }\r\n        else if(chooseStep==1&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(1))){\r\n            src=board.getChessPoint(board.getAIChess(chooseChess));\r\n            dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(1);\r\n            if(board.canEat(src,dest)){\r\n                board.eat(src,dest);\r\n                LastAction=true;\r\n            }\r\n            else{\r\n                board.move(src,dest);\r\n                LastAction=false;\r\n            }\r\n        }\r\n        else if(chooseStep==2&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(2))){\r\n            src=board.getChessPoint(board.getAIChess(chooseChess));\r\n            dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(2);\r\n            if(board.canEat(src,dest)){\r\n                board.eat(src,dest);\r\n                LastAction=true;\r\n            }\r\n            else{\r\n                board.move(src,dest);\r\n                LastAction=false;\r\n            }\r\n        }\r\n        else if(chooseStep==3&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(3))){\r\n            src=board.getChessPoint(board.getAIChess(chooseChess));\r\n            dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(3);\r\n            if(board.canEat(src,dest)){\r\n                board.eat(src,dest);\r\n                LastAction=true;\r\n            }\r\n            else{\r\n                board.move(src,dest);\r\n                LastAction=false;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/AI.java b/src/model/AI.java
--- a/src/model/AI.java	(revision e6b38a12294199405ebd993ceb40e207911f3be7)
+++ b/src/model/AI.java	(date 1684663401077)
@@ -1,12 +1,11 @@
 package model;
-import view.BoardView;
 
 import java.util.Random;
 public class AI {
     private Player AIplayer=Player.RED;
     public BoardPoint src;
     public BoardPoint dest;
-    public boolean LastAction=false;
+    public boolean LastActioniseat =false;
     public void EasyAI(Board board){
         Random random=new Random();
         int chooseChess=random.nextInt(1,8);
@@ -20,11 +19,11 @@
             dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(0);
             if(board.canEat(src,dest)){
                 board.eat(src,dest);
-                LastAction=true;
+                LastActioniseat =true;
             }
             else{
                 board.move(src,dest);
-                LastAction=false;
+                LastActioniseat =false;
             }
         }
         else if(chooseStep==1&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(1))){
@@ -32,11 +31,11 @@
             dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(1);
             if(board.canEat(src,dest)){
                 board.eat(src,dest);
-                LastAction=true;
+                LastActioniseat =true;
             }
             else{
                 board.move(src,dest);
-                LastAction=false;
+                LastActioniseat =false;
             }
         }
         else if(chooseStep==2&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(2))){
@@ -44,11 +43,11 @@
             dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(2);
             if(board.canEat(src,dest)){
                 board.eat(src,dest);
-                LastAction=true;
+                LastActioniseat =true;
             }
             else{
                 board.move(src,dest);
-                LastAction=false;
+                LastActioniseat =false;
             }
         }
         else if(chooseStep==3&&board.canMove(board.getChessPoint(board.getAIChess(chooseChess)),board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(3))){
@@ -56,11 +55,11 @@
             dest=board.getCanmovepoints(board.getChessPoint(board.getAIChess(chooseChess))).get(3);
             if(board.canEat(src,dest)){
                 board.eat(src,dest);
-                LastAction=true;
+                LastActioniseat =true;
             }
             else{
                 board.move(src,dest);
-                LastAction=false;
+                LastActioniseat =false;
             }
         }
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e93436ec-d404-4df7-bde5-cda3dcb5f90d\" name=\"Changes\" comment=\"完善了倒计时功能\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/controller/Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/controller/Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/AIFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/AIFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/GameFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/GameFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/LoginFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/LoginFrame.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2PSQB1ZCcKNuSJPZJAp7o95qQHb\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/0JAVACOMMUNITY/0Javawork/Jungle&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\0JAVACOMMUNITY\\0Javawork\\CS109\\resource\" />\r\n      <recent name=\"D:\\0JAVACOMMUNITY\\0Javawork\\CS109\\src\\view\" />\r\n      <recent name=\"D:\\0JAVACOMMUNITY\\0Javawork\\CS109\\src\\view\\chessView\" />\r\n      <recent name=\"D:\\0JAVACOMMUNITY\\0Javawork\\CS109\" />\r\n      <recent name=\"D:\\0JAVACOMMUNITY\\0Javawork\\Project1\\src\\view\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"model\" />\r\n      <recent name=\"view\" />\r\n      <recent name=\"\" />\r\n      <recent name=\"view.chessView\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"Project1\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e93436ec-d404-4df7-bde5-cda3dcb5f90d\" name=\"Changes\" comment=\"\" />\r\n      <created>1683447865168</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1683447865168</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Test1\">\r\n      <created>1683949135727</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683949135727</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"第一个没有放棋子的稳定版本\">\r\n      <created>1684031348336</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684031348336</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"稳定1.0\">\r\n      <created>1684031402888</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684031402888</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Test0.1\">\r\n      <created>1684040423405</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684040423405</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Test0.1\">\r\n      <created>1684152861499</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684152861499</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Test0.1\">\r\n      <created>1684152982621</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684152982621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"2.0\">\r\n      <created>1684153759325</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684153759325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"优化了frame和登录界面\">\r\n      <created>1684281396475</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684281396475</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"优化了游戏界面，新增了更换主题功能\">\r\n      <created>1684370714273</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684370714273</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Version8&#10;修改了新bug&#10;实现了悔棋功能\">\r\n      <created>1684566038589</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684566038589</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Version9&#10;修改了新bug&#10;实现了悔棋功能&#10;但是发现棋子如果在最下面一行的话悔棋过程的view就无法显示，其他地方的悔棋view都很正常，应该是前端的问题，你有时间看看吧\">\r\n      <created>1684569186438</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684569186438</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"增加了展示死亡棋子的功能\">\r\n      <created>1684636046302</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684636046302</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"尝试加多个存档但失败了，后续再看\">\r\n      <created>1684640851243</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684640851243</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"尝试加多个存档但失败了，后续再看\">\r\n      <created>1684640864562</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684640864562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"添加了倒计时功能\">\r\n      <created>1684646658263</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684646658263</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"完善了倒计时功能\">\r\n      <created>1684653180798</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684653180798</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Test1\" />\r\n    <MESSAGE value=\"第一个没有放棋子的稳定版本\" />\r\n    <MESSAGE value=\"稳定1.0\" />\r\n    <MESSAGE value=\"Test0.1\" />\r\n    <MESSAGE value=\"2.0\" />\r\n    <MESSAGE value=\"优化了frame和登录界面\" />\r\n    <MESSAGE value=\"优化了游戏界面，新增了更换主题功能\" />\r\n    <MESSAGE value=\"Version8&#10;修改了新bug&#10;实现了悔棋功能\" />\r\n    <MESSAGE value=\"Version9&#10;修改了新bug&#10;实现了悔棋功能&#10;但是发现棋子如果在最下面一行的话悔棋过程的view就无法显示，其他地方的悔棋view都很正常，应该是前端的问题，你有时间看看吧\" />\r\n    <MESSAGE value=\"增加了展示死亡棋子的功能\" />\r\n    <MESSAGE value=\"尝试加多个存档但失败了，后续再看\" />\r\n    <MESSAGE value=\"添加了倒计时功能\" />\r\n    <MESSAGE value=\"完善了倒计时功能\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"完善了倒计时功能\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e6b38a12294199405ebd993ceb40e207911f3be7)
+++ b/.idea/workspace.xml	(date 1684676979598)
@@ -4,12 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e93436ec-d404-4df7-bde5-cda3dcb5f90d" name="Changes" comment="完善了倒计时功能">
+    <list default="true" id="e93436ec-d404-4df7-bde5-cda3dcb5f90d" name="Changes" comment="Version10&#10;修改了新bug">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023_5_21_8_59__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023_5_21_8_59__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/controller/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/AIFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/AIFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/AI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/AI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/Board.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/view/GameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/GameFrame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/LoginFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/LoginFrame.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -38,14 +39,14 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;D:/0JAVACOMMUNITY/0Javawork/Jungle&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "last_opened_file_path": "C:/Users/惠普/IdeaProjects/practice1"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="D:\0JAVACOMMUNITY\0Javawork\CS109\resource" />
@@ -189,14 +190,7 @@
       <option name="project" value="LOCAL" />
       <updated>1684646658263</updated>
     </task>
-    <task id="LOCAL-00016" summary="完善了倒计时功能">
-      <created>1684653180798</created>
-      <option name="number" value="00016" />
-      <option name="presentableId" value="LOCAL-00016" />
-      <option name="project" value="LOCAL" />
-      <updated>1684653180798</updated>
-    </task>
-    <option name="localTasksCounter" value="17" />
+    <option name="localTasksCounter" value="16" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -223,7 +217,6 @@
     <MESSAGE value="增加了展示死亡棋子的功能" />
     <MESSAGE value="尝试加多个存档但失败了，后续再看" />
     <MESSAGE value="添加了倒计时功能" />
-    <MESSAGE value="完善了倒计时功能" />
-    <option name="LAST_COMMIT_MESSAGE" value="完善了倒计时功能" />
+    <option name="LAST_COMMIT_MESSAGE" value="添加了倒计时功能" />
   </component>
 </project>
\ No newline at end of file
